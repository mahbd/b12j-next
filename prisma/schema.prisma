generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts      Account[]
  contests      Contest[]
  problems      Problem[]
  submissions   Submission[]
  tutorials     Tutorial[]
  Session       Session[]
  Authenticator Authenticator[]
  ContestUser   ContestModerator[]
}

model Contest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  description String?
  endTime     DateTime
  startTime   DateTime
  title       String   @unique
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  moderators  ContestModerator[]
  problems    ContestProblem[]
  submissions Submission[]
  tutorials   Tutorial[]
}

model ContestModerator {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  contestId String @db.ObjectId
  userId    String @db.ObjectId

  contest Contest @relation(fields: [contestId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([contestId, userId])
}

model Problem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  correctCode String?
  createdAt   DateTime @default(now())
  description String
  isHidden    Boolean  @default(true)
  input       String
  memoryLimit Int      @default(262144)
  output      String
  timeLimit   Int      @default(1)
  title       String   @unique
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  contestProblems ContestProblem[]
  submissions     Submission[]
  testCases       TestCase[]
  tutorials       Tutorial[]
}

model Tutorial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contestId   String?  @db.ObjectId
  createdAt   DateTime @default(now())
  description String
  isHidden    Boolean  @default(false)
  problemId   String?  @db.ObjectId
  title       String
  userId      String   @db.ObjectId

  contest Contest? @relation(fields: [contestId], references: [id])
  problem Problem? @relation(fields: [problemId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model ContestProblem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  contestId    String   @db.ObjectId
  createdAt    DateTime @default(now())
  problemIndex String
  problemId    String   @db.ObjectId

  contest Contest @relation(fields: [contestId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([contestId, problemId])
}

enum Verdict {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  MEMORY_LIMIT_EXCEEDED
  PENDING
  RUNNING
}

model Submission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  contestId String?  @db.ObjectId
  createdAt DateTime @default(now())
  details   String?
  language  Language
  problemId String   @db.ObjectId
  userId    String   @db.ObjectId
  verdict   Verdict  @default(PENDING)

  contest Contest? @relation(fields: [contestId], references: [id])
  problem Problem  @relation(fields: [problemId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model TestCase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  input     String
  isSample  Boolean  @default(false)
  output    String
  problemId String   @db.ObjectId

  problem Problem @relation(fields: [problemId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum Language {
  JAVASCRIPT
  C_CPP
  PYTHON3
}

enum Role {
  ADMIN
  STAFF
  USER
}
